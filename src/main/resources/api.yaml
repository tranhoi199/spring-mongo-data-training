openapi: 3.0.0
info:
  description: API specification for SuperBlog microservice
  version: v3
  title: SuperBlog microservice API
servers:
  - url: http://localhost:8080/
paths:
  /articles:
    get:
      tags:
        - getArticleList
      summary: Get all articles
      operationId: getArticleList
      responses:
        '200':
          description: Get article list successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleListResponse'
    post:
      tags:
        - createArticle
      summary: Create article
      operationId: createArticle
      requestBody:
        description: Create article
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/CreateArticleRequest'
      responses:
        '200':
          description: Create article successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectCreationSuccessResponse'
  /articles/{articleId}:
    get:
      tags:
        - getArticle
      summary: get particular article
      operationId: getArticle
      parameters:
        - name: articleId
          in: path
          required: true
          description: id of article
          schema:
            type: string
      responses:
        '200':
          description: get article sucessfull
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleResponseModel'
    put:
      tags:
        - updateArticle
      summary: update a particular article
      operationId: updateArticle
      parameters:
        - name: articleId
          in: path
          required: true
          description: id of article
          schema:
            type: string
      requestBody:
        description: update Article
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateArticleRequest'
      responses:
        '200':
          description: update article successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleResponseModel'
    delete:
      tags:
        - deleteArticle
      summary: delete a particular article
      operationId: deleteArticle
      parameters:
        - name: articleId
          in: path
          required: true
          description: id of article
          schema:
            type: string
      responses:
        '200':
          description: delete article successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectDeletionSuccessResponse'
  /users:
    get:
      tags:
        - getUserList
      summary: Get all users
      operationId: getUserList
      responses:
        '200':
          description: Get user list successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'

    post:
      tags:
        - createUser
      summary: Create user
      operationId: createUser
      requestBody:
        description: Create user
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '200':
          description: Create user successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectCreationSuccessResponse'
  /users/find-by-email:
    get:
      tags:
        - search user by email
      summary: Search user by email
      operationId: findUserByEmail
      parameters:
        - in: query
          name: email
          schema:
            type: string
          required: false
      responses:
        '200':
          description: Search user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
  /categories:
    get:
      tags:
        - get list of all categories
      summary: get list of all categories
      operationId: getCategoryList
      responses:
        '200':
          description: get all categories successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryListResponse'
    post:
      tags:
        - createCategory
      summary: create a category
      operationId: createCategory
      requestBody:
        description: Create article
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/CreateCategoryRequest'
      responses:
        '200':
          description: create category sucessfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponseModel'
  /categories/{cateId}:
    get:
      tags:
        - getCategory
      summary: get particular category
      operationId: getCategory
      parameters:
        - name: cateId
          in: path
          required: true
          description: id of category
          schema:
            type: string
      responses:
        '200':
          description: get category sucessfull
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponseModel'
    put:
      tags:
        - updateCategory
      summary: update a particular category
      operationId: updateCategory
      parameters:
        - name: cateId
          in: path
          required: true
          description: id of category
          schema:
            type: string
      requestBody:
        description: update Category
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCategoryRequest'
      responses:
        '200':
          description: update article successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponseModel'
    delete:
      tags:
        - deleteCategory
      summary: delete a particular category
      operationId: deleteCategory
      parameters:
        - name: cateId
          in: path
          required: true
          description: id of category
          schema:
            type: string
      responses:
        '200':
          description: delete article successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectDeletionSuccessResponse'

components:
  schemas:
    UserListResponse:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserResponseModel'
    UserResponseModel:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        id:
          type: string

    ArticleListResponse:
      type: object
      properties:
        articles:
          type: array
          items:
            $ref: '#/components/schemas/ArticleResponseModel'
    ArticleResponseModel:
      type: object
      properties:
        title:
          type: string
        content:
          type: string
        authorName:
          type: string
        authorId:
          type: string
    CreateArticleRequest:
      type: object
      properties:
        title:
          type: string
        content:
          type: string
        authorId:
          type: string
        category:
          type: string
    UpdateArticleRequest:
      type: object
      properties:
        title:
          type: string
        content:
          type: string
    CreateUserRequest:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
    CategoryListResponse:
      type: object
      properties:
        categories:
          type: array
          items:
            $ref: '#/components/schemas/CategoryResponseModel'
    CategoryResponseModel:
      type: object
      properties:
        id:
          type: string
        categoryname:
          type: string
        description:
          type: string

    CreateCategoryRequest:
      type: object
      properties:
        categoryname:
          type: string
        description:
          type: string
    UpdateCategoryRequest:
      type: object
      properties:
        categoryname:
          type: string
        description:
          type: string

    ObjectCreationSuccessResponse:
      type: object
      properties:
        id:
          type: string
        responseCode:
          type: integer

    ObjectDeletionSuccessResponse:
      type: object
      properties:
        id:
          type: string
        responseCode:
          type: integer

    ApiError:
      type: object
      properties:
        faults:
          type: array
          items:
            $ref: "#/components/schemas/Fault"
        responseCode:
          type: integer
    Fault:
      type: object
      properties:
        internalMessage:
          type: string
        code:
          type: integer
        userMessage:
          type: string

  examples:
    InternalServerError:
      value:
        responseCode: 500
        faults:
          -:
          userMessage: There're some error when processing this request. Please retry again or contact the site administrator for supporting
          internalMessage: Internal server error
          code: 1000
          responseCode: 500
